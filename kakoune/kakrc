add-highlighter global/ number-lines -hlcursor -relative -separator "  " -cursor-separator " |"
add-highlighter global/ show-matching

set-option global ui_options terminal_assistant=cat

set-option global tabstop 2
set-option global indentwidth 2

map global normal <esc> ";,"
map global normal <c-v> ":comment-line<ret>"

map -docstring "close current buffer" global user b ": db<ret>"
map -docstring "goto previous buffer" global user n ": bp<ret>"
map -docstring "goto next buffer" global user m ": bn<ret>"

evaluate-commands %sh{
        plugins="$kak_config/plugins"
            mkdir -p "$plugins"
                [ ! -e "$plugins/plug.kak" ] && \
                        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
                            printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload

plug "kakoune-lsp/kakoune-lsp" do %{
        cargo install --locked --force --path .
}

# hook global InsertCompletionShow .* %{
# 	try %{
#   	execute-keys -draft 'h<a-K>\h<ret>'
#   	map window insert <ret> <c-n>
#   	map window insert <s-tab> <c-p>
#   	hook -once -always window InsertCompletionSyhow .* %{
#     	unmap window insert <tab> <c-n>
#     	unmap window insert <s-tab> <c-p>
#   	}
# 	}
# }

hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
        lsp-enable-window
}

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

# themes
plug "secondary-smiles/kakoune-themes" theme config %{
  colorscheme pastel
}

# autopairs
plug "alexherbo2/auto-pairs.kak" config %{
    enable-auto-pairs
}

# fzf
plug "andreyorst/fzf.kak" config %{
  require-module fzf
    require-module fzf-grep
      require-module fzf-file
      } defer fzf %{
        set-option global fzf_highlight_command "lat -r {}"
        } defer fzf-file %{
          set-option global fzf_file_command "fd . --no-ignore-vcs"
          } defer fzf-grep %{
		set-option global fzf_grep_command "fd"
}
map -docstring "open fzf" global user f ": fzf-mode<ret>"

plug "evanrelf/byline.kak" config %{
    require-module "byline"
}

plug "gustavo-hms/luar" %{
    require-module luar
}

